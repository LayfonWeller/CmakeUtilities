set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR arm)
# set(CMAKE_STAGING_PREFIX)

set(TARGET_TRIPLET arm-none-eabi)

set(TOOLCHAIN_PATH $ENV{ARMGCC_DIR})
if(NOT DEFINED TOOLCHAIN_PATH)
  if(CMAKE_HOST_SYSTEM_NAME STREQUAL Linux)
    list(APPEND TOOLCHAIN_PATH_PROSPECT "/usr")
  elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL Darwin)
    list(APPEND TOOLCHAIN_PATH_PROSPECT "/usr/local")
  elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL Windows)
    # set(TOOLCHAIN_PATH "C:/Program Files (x86)/GNU Tools Arm Embedded/")
  else()
    list(APPEND TOOLCHAIN_PATH_PROSPECT "/usr")
    message(STATUS "No TOOLCHAIN_PATH specified, using default: " ${TOOLCHAIN_PATH})
  endif()
  find_program(CMAKE_C_COMPILER ${TARGET_TRIPLET}-gcc PATH ${TOOLCHAIN_PATH_PROSPECT})
  if(CMAKE_C_COMPILER)
    get_filename_component(TOOLCHAIN_PATH ${CMAKE_C_COMPILER} DIRECTORY)
  else()
    message(FATAL_ERROR "Could not find compiler location")
  endif()
endif()

set(CMAKE_EXECUTABLE_SUFFIX ".elf")

# Without that flag CMake is not able to pass test compilation check
if(${CMAKE_VERSION} VERSION_EQUAL "3.6.0" OR ${CMAKE_VERSION} VERSION_GREATER "3.6")
  set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
else()
  set(CMAKE_EXE_LINKER_FLAGS_INIT "--specs=nosys.specs ")
endif()

find_program(CMAKE_C_COMPILER ${TARGET_TRIPLET}-gcc PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_ASM_COMPILER ${TARGET_TRIPLET}-gcc PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_CXX_COMPILER ${TARGET_TRIPLET}-g++ PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_OBJCOPY ${TARGET_TRIPLET}-objcopy PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_SIZE_UTIL ${TARGET_TRIPLET}-size PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_OBJDUMP ${TARGET_TRIPLET}-objdump PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_RANLIB ${TARGET_TRIPLET}-ranlib PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_READELF ${TARGET_TRIPLET}-readelf PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_NM ${TARGET_TRIPLET}-nm PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_LINKER ${TARGET_TRIPLET}-ld PATH ${TOOLCHAIN_PATH})
find_program(CMAKE_GDB ${TARGET_TRIPLET}-gdb PATH ${TOOLCHAIN_PATH})

set(CMAKE_SYSROOT ${TOOLCHAIN_PATH}/../${TARGET_TRIPLET})
set(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_PATH}/..)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
